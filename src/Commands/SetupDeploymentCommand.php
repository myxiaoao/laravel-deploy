<?php

namespace Cooper\LaravelDeploy\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;

class SetupDeploymentCommand extends Command
{
    protected $signature = 'deploy:setup';
    protected $description = 'Set up deployment script';

    public function handle()
    {
        $gitBranch = $this->ask('Enter the default git branch to deploy (leave blank for master)');
        $projectPath = base_path();
        $gitBranch = empty($gitBranch) ? 'master' : $gitBranch;
        $phpPath = PHP_BINARY;
        $composerPath = $this->getComposerPath();

        // Check if Horizon and Telescope are installed
        $hasHorizon = File::exists($projectPath . '/artisan') && strpos(shell_exec("php artisan | grep 'horizon:'"), 'horizon:') !== false;
        $hasTelescope = File::exists($projectPath . '/artisan') && strpos(shell_exec("php artisan | grep 'telescope:'"), 'telescope:') !== false;

        // Create or update deployment script with credits and conditionally include Horizon/Telescope commands
        $scriptContent = "#!/bin/bash\n\n" .
            "# Deployment Script\n" .
            "# Generated by Laravel Deploy package\n" .
            "# @credits: Cooper\n\n" .
            "cd $projectPath &&\n\n" .
            "git fetch &&\n" .
            "git stash &&\n\n" .
            "git reset origin/$gitBranch --hard &&\n\n" .
            "$phpPath $composerPath install --no-interaction --prefer-dist --optimize-autoloader &&\n\n";

        if ($hasHorizon) {
            $scriptContent .= "$phpPath artisan horizon:terminate &&\n";
        }

        $scriptContent .= "$phpPath artisan optimize:clear &&\n\n" .
            "$phpPath artisan cache:clear &&\n\n" .
            "$phpPath artisan config:clear &&\n" .
            "$phpPath artisan config:cache &&\n\n" .
            "$phpPath artisan view:clear &&\n" .
            "$phpPath artisan view:cache &&\n\n" .
            "$phpPath artisan event:clear &&\n" .
            "$phpPath artisan event:cache &&\n\n" .
            "$phpPath artisan route:clear &&\n" .
            "$phpPath artisan route:cache &&\n\n" .
            "$phpPath artisan migrate --force &&\n\n";

        if ($hasTelescope) {
            $scriptContent .= "$phpPath artisan telescope:prune &&\n\n";
        }

        $scriptContent .= "echo \"ðŸš€ Application deployed!\" \n ";

        $scriptPath = base_path('deploy.sh');
        file_put_contents($scriptPath, $scriptContent);
        chmod($scriptPath, 0755);

        $this->info('Deployment setup complete. Configuration file and script have been updated.');
        return 0;
    }

    /**
     * Get composer path.
     *
     * @return string
     */
    protected function getComposerPath()
    {
        $composerPath = shell_exec('whereis composer');
        $composerPath = trim($composerPath);

        preg_match('/composer: (.+)/', $composerPath, $matches);

        return isset($matches[1]) ? $matches[1] : '';
    }
}
